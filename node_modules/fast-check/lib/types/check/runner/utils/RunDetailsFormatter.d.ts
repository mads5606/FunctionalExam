import { RunDetails } from '../reporter/RunDetails';
/**
 * Format output of `fc.check` using the default error reporting of `fc.assert`
 *
 * Produce a string containing the formated error in case of failed run,
 * undefined otherwise.
 */
declare function defaultReportMessage<Ts>(out: RunDetails<Ts> & {
    failed: false;
}): undefined;
/**
 * Format output of `fc.check` using the default error reporting of `fc.assert`
 *
 * Produce a string containing the formated error in case of failed run,
 * undefined otherwise.
 */
declare function defaultReportMessage<Ts>(out: RunDetails<Ts> & {
    failed: true;
}): string;
/**
 * Format output of `fc.check` using the default error reporting of `fc.assert`
 *
 * Produce a string containing the formated error in case of failed run,
 * undefined otherwise.
 */
declare function defaultReportMessage<Ts>(out: RunDetails<Ts>): string | undefined;
/**
 * @hidden
 * In case this code has to be executed synchronously the caller
 * has to make sure that no asyncReporter has been defined
 * otherwise it might trigger an unchecked promise
 */
declare function reportRunDetails<Ts>(out: RunDetails<Ts>): Promise<void> | void;
export { defaultReportMessage, reportRunDetails };

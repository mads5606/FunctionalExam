{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;AAAA,gCAAkC;AAClC,iCAA4C;AAE5C,IAAI,CAAC,kBAAkB,EAAE,UAAA,CAAC;IACxB,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,UAAA,CAAC;QACpB,IAAM,CAAC,GAAG,YAAI,CAAC,UAAU,GAAQ,EAAE,GAAQ;YACzC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;QAC1C,CAAC,CAAC,CAAA;QAEF,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,GAAG;YACrB,CAAC,CAAC,KAAK,CAAC,GAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;YAC7B,CAAC,CAAC,GAAG,EAAE,CAAA;QACT,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAA,CAAC;QAC1B,IAAM,CAAC,GAAG,YAAI,CAAC,UAAU,GAAU,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAkB;YACzE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;YAC5B,CAAC,CAAC,GAAG,EAAE,CAAA;QACT,CAAC,CAAC,CAAA;QAEF,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,cAAkB,CAAC,CAAC,CAAA;IACnD,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,UAAA,CAAC;QACnC,IAAM,CAAC,GAAG,YAAI,CAAC,UAAU,GAAU,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAkB;YACzE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QAC5B,CAAC,CAAC,CAAA;QAEF,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,UAAU,GAAG;YACxC,CAAC,CAAC,KAAK,CAAC,GAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;YAC7B,CAAC,CAAC,GAAG,EAAE,CAAA;QACT,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import test = require('blue-tape')\nimport { wrap, NextFunction } from './index'\n\ntest('async middleware', t => {\n  t.test('middleware', t => {\n    const m = wrap(function (req: any, res: any) {\n      return Promise.reject(new Error('test'))\n    })\n\n    m({}, {}, function (err) {\n      t.equal(err!.message, 'test')\n      t.end()\n    })\n  })\n\n  t.test('error middleware', t => {\n    const m = wrap(function (err: Error, req: any, res: any, next: NextFunction) {\n      t.equal(err.message, 'test')\n      t.end()\n    })\n\n    m(new Error('test'), {}, {}, function () {/* */})\n  })\n\n  t.test('error in error middleware', t => {\n    const m = wrap(function (err: Error, req: any, res: any, next: NextFunction) {\n      return Promise.reject(err)\n    })\n\n    m(new Error('test'), {}, {}, function (err) {\n      t.equal(err!.message, 'test')\n      t.end()\n    })\n  })\n})\n"]}